import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as e,e as p,a as n,r as o}from"./app.520110ff.js";const c={},i=n(`<p>Hooks are a powerful way to separate technical needs from business logic.<br> There are two different types of hooks:</p><p>There are hooks with return value, which are able to take inputs, execute some logic and return a value.<br> The returned value is then used as input for the next hook or the business function.<br> These hooks are expected to not throw any error and called transform hooks.</p><p>On the other hand, there are hooks which do not return a value. The purpose is to only validate input data, and they are expected to throw HandledError.<br> For better differentiation, hooks without return values called guard hooks.</p><h2 id="service-function-hooks" tabindex="-1"><a class="header-anchor" href="#service-function-hooks" aria-hidden="true">#</a> Service function hooks</h2><p><strong>Example-flow:</strong></p><div class="language-mermaid ext-mermaid line-numbers-mode"><pre class="language-mermaid"><code><span class="token keyword">flowchart</span> TB
    command<span class="token text string">(((Command)))</span> <span class="token arrow operator">==&gt;</span> <span class="token label property">|message unknown payload &amp; unknown params|</span> inputTransformHook<span class="token text string">[InputTransformHook]</span>
    inputTransformHook <span class="token arrow operator">==&gt;</span> <span class="token label property">|decoded/transformed typed payload &amp; params|</span>inputValidation

    <span class="token keyword">subgraph</span> inputValidation<span class="token text string">[validate input]</span>
        validateInputPayload<span class="token text string">[validate payload]</span>
        validateParamsPayload<span class="token text string">[validate parameter]</span>
    <span class="token keyword">end</span>


    inputValidation <span class="token arrow operator">==&gt;</span> <span class="token label property">|typed &amp; validated payload &amp; params|</span> beforeGuardHook

    <span class="token keyword">subgraph</span> beforeGuardHook<span class="token text string">[before guard hooks]</span>
        beforehook1<span class="token text string">[BeforeGuardHook check permissions]</span>
        beforehook2<span class="token text string">[BeforeGuardHook check rate limits]</span>
    <span class="token keyword">end</span>
    
    beforeGuardHook<span class="token arrow operator">==&gt;</span><span class="token label property">|typed payload &amp; params|</span>function

    function<span class="token text string">[execute the function]</span><span class="token arrow operator">==&gt;</span><span class="token label property">|typed output payload|</span> outputValidation<span class="token text string">[output validation]</span>
    
    outputValidation <span class="token arrow operator">==&gt;</span> <span class="token label property">|typed and validated output payload|</span> afterGuardHook

    <span class="token keyword">subgraph</span> afterGuardHook<span class="token text string">[after guard hooks]</span>
        afterhook1<span class="token text string">[afterGuardHook check permissions]</span>
        afterhook2<span class="token text string">[afterGuardHook check rate limits]</span>
    <span class="token keyword">end</span>

    afterGuardHook <span class="token arrow operator">==&gt;</span> outputTransformHook
   
    outputTransformHook<span class="token arrow operator">==&gt;</span><span class="token label property">|encode/transform output payload|</span> successResponse<span class="token text string">(((SuccessResponse)))</span>

 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="transforminputhook" tabindex="-1"><a class="header-anchor" href="#transforminputhook" aria-hidden="true">#</a> TransformInputHook</h3><p>This transform hook is called before input validation.<br> It allows implementing migrations, decoding or transformation of input message payload and message parameters without touching the main business logic.</p><p>A use case could be, that the message payload is encrypted and needs to be decrypted.<br> Typically, anything like input schema migrations is also a good example for using transform hooks.</p><p>The input types of an input transform hook (payload &amp; parameter) will be automatically set the types for original message payload and parameter.<br> If you&#39;ve set an input validation schema (you should do it always), the result type for the transform input hook is automatically set.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> FunctionDefinitionBuilder <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@purista/core&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createDecipheriv <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;crypto&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> z <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;zod&#39;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> UserService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../UserService&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> inputParameterSchema<span class="token punctuation">,</span> inputPayloadSchema<span class="token punctuation">,</span> outputPayloadSchema <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./schema&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> signUp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./signUp&#39;</span>


<span class="token keyword">const</span> payloadSchema <span class="token operator">=</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  iv<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  content<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> parameterSchema <span class="token operator">=</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  algorithm<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  secretKey<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">FunctionDefinitionBuilder<span class="token operator">&lt;</span>UserService<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&#39;signUp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Sign up a new unknown user&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;NewUserCreated&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">addInputSchema</span><span class="token punctuation">(</span>inputPayloadSchema<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">addParameterSchema</span><span class="token punctuation">(</span>inputParameterSchema<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">addOutputSchema</span><span class="token punctuation">(</span>outputPayloadSchema<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">exposeAsHttpEndpoint</span><span class="token punctuation">(</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/sign-up&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">transformInput</span><span class="token punctuation">(</span>payloadSchema<span class="token punctuation">,</span> parameterSchema<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span>_context<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
    <span class="token comment">// _originalMessage.command.payload type will become automatically { iv: string; content: string }</span>
    <span class="token comment">// _originalMessage.command.params type will become automatically { algorithm: string; secretKey: string }</span>
    <span class="token comment">// the result type of this function is automatically set, because we set input and parameter schema before</span>

    <span class="token keyword">const</span> decipher <span class="token operator">=</span> <span class="token function">createDecipheriv</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>algorithm<span class="token punctuation">,</span> params<span class="token punctuation">.</span>secretKey<span class="token punctuation">,</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>payload<span class="token punctuation">.</span>iv<span class="token punctuation">,</span> <span class="token string">&#39;hex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> decrpyted <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>decipher<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>payload<span class="token punctuation">.</span>content<span class="token punctuation">,</span> <span class="token string">&#39;hex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> decipher<span class="token punctuation">.</span><span class="token function">final</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      params<span class="token punctuation">,</span>
      payload<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>decrpyted<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setFunction</span><span class="token punctuation">(</span>signUp<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="beforeguardhook" tabindex="-1"><a class="header-anchor" href="#beforeguardhook" aria-hidden="true">#</a> BeforeGuardHook</h3><p>The before guard hook is extremely useful for any use case where you need to validate authorization/authentication, rate limits and similar things.</p><p>This guard should throw a HandledError, if for example the user is not allowed to execute this function.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> FunctionDefinitionBuilder<span class="token punctuation">,</span> HandledError<span class="token punctuation">,</span> StatusCode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@purista/core&#39;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> UserService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../UserService&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>
  inputParameterSchema<span class="token punctuation">,</span>
  inputPayloadSchema<span class="token punctuation">,</span>
  outputPayloadSchema<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./schema&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> signUp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./signUp&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">FunctionDefinitionBuilder<span class="token operator">&lt;</span>UserService<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&#39;signUp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Sign up a new unknown user&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;NewUserCreated&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">addInputSchema</span><span class="token punctuation">(</span>inputPayloadSchema<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">addParameterSchema</span><span class="token punctuation">(</span>inputParameterSchema<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">addOutputSchema</span><span class="token punctuation">(</span>outputPayloadSchema<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">exposeAsHttpEndpoint</span><span class="token punctuation">(</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/sign-up&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setBeforeGuardHook</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">{</span> logger <span class="token punctuation">}</span><span class="token punctuation">,</span> payload<span class="token punctuation">,</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>email <span class="token operator">===</span> <span class="token string">&#39;blocked@example.com&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;user not allowed&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HandledError</span><span class="token punctuation">(</span>StatusCode<span class="token punctuation">.</span>Forbidden<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setFunction</span><span class="token punctuation">(</span>signUp<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="afterguardhook" tabindex="-1"><a class="header-anchor" href="#afterguardhook" aria-hidden="true">#</a> AfterGuardHook</h3><p>This guard hook is called after response validation and before AfterTransformHook.</p><p>There are not so much real use cases where it would make sense to use this hook.<br> Example is additional logging and any kind of metrics.</p><p>It is also possible to use this hook for optimization purpose.<br> As an example:</p><p>A function is making a financial transaction and returns the actual balance. You like to inform the user as soon as the balance is below a certain level.<br> You could build a subscription which is listening for all responses of this function. Expecting that only 10% of function responses will result in informing the user, 90% of subscription invocations would waste resources.</p>`,20),u=n(`<p>All hooks will need computation resources and because of this it will increase response time.<br> Also keep in mind that, in case a hook fails, and it is throwing, the business information might be lost or can&#39;t be reproduced.</p><p>In the financial example, prefer a subscription or simply emit some custom event in the after guard hook instead of doing some time-consuming stuff.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> FunctionDefinitionBuilder <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@purista/core&#39;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> UserService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../UserService&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> inputParameterSchema<span class="token punctuation">,</span> inputPayloadSchema<span class="token punctuation">,</span> outputPayloadSchema<span class="token punctuation">,</span> OutputPayloadType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./schema&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> signUp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./signUp&#39;</span>


<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">FunctionDefinitionBuilder<span class="token operator">&lt;</span>UserService<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&#39;signUp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Sign up a new unknown user&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;NewUserCreated&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">addInputSchema</span><span class="token punctuation">(</span>inputPayloadSchema<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">addParameterSchema</span><span class="token punctuation">(</span>inputParameterSchema<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">addOutputSchema</span><span class="token punctuation">(</span>outputPayloadSchema<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">exposeAsHttpEndpoint</span><span class="token punctuation">(</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/sign-up&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setAfterGuardHook</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">{</span> logger <span class="token punctuation">}</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// the type of result is automatically set, because we added a output schema before</span>

    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;afterGuardHook1&#39;</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>uuid<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setFunction</span><span class="token punctuation">(</span>signUp<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="transformoutputhook" tabindex="-1"><a class="header-anchor" href="#transformoutputhook" aria-hidden="true">#</a> TransformOutputHook</h3><p>This transform hook is called after output validation and after AfterGuardHook as very last step. It allows implementing migration or encoding of response payload without touching the main business logic.</p><p>Like the InputTransformHook, a good example could be the encryption of the response payload.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> FunctionDefinitionBuilder <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@purista/core&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createCipheriv<span class="token punctuation">,</span> randomBytes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;crypto&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> z <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;zod&#39;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> UserService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../UserService&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> inputParameterSchema<span class="token punctuation">,</span> inputPayloadSchema<span class="token punctuation">,</span> outputPayloadSchema <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./schema&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> signUp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./signUp&#39;</span>

<span class="token keyword">const</span> outputSchema <span class="token operator">=</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  iv<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  content<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">FunctionDefinitionBuilder<span class="token operator">&lt;</span>UserService<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&#39;signUp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Sign up a new unknown user&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;NewUserCreated&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">addInputSchema</span><span class="token punctuation">(</span>inputPayloadSchema<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">addParameterSchema</span><span class="token punctuation">(</span>inputParameterSchema<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">addOutputSchema</span><span class="token punctuation">(</span>outputPayloadSchema<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">exposeAsHttpEndpoint</span><span class="token punctuation">(</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/sign-up&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">transformOutput</span><span class="token punctuation">(</span>outputSchema<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>_context<span class="token punctuation">,</span> outputPayload<span class="token punctuation">,</span> _inputPayload<span class="token punctuation">,</span> inputParams<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>outputPayload<span class="token punctuation">)</span>

    <span class="token keyword">const</span> iv <span class="token operator">=</span> <span class="token function">randomBytes</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>

    <span class="token keyword">const</span> cipher <span class="token operator">=</span> <span class="token function">createCipheriv</span><span class="token punctuation">(</span>inputParams<span class="token punctuation">.</span>algorithm<span class="token punctuation">,</span> inputParams<span class="token punctuation">.</span>secretKey<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>

    <span class="token keyword">const</span> encrypted <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>cipher<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">,</span> cipher<span class="token punctuation">.</span><span class="token function">final</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      iv<span class="token punctuation">,</span>
      content<span class="token operator">:</span> encrypted<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setFunction</span><span class="token punctuation">(</span>signUp<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function l(r,k){const s=o("Badge");return t(),e("div",null,[i,p(s,{text:"Be aware",type:"warning"}),u])}const v=a(c,[["render",l],["__file","4_hooks.html.vue"]]);export{v as default};
