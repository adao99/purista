import{_ as p}from"./plugin-vue_export-helper.21dcd24c.js";import{r as s,o as e,c,e as a,a as n}from"./app.c31a4ec8.js";const i={},u=n('<h1 id="hooks" tabindex="-1"><a class="header-anchor" href="#hooks" aria-hidden="true">#</a> Hooks</h1><p>Hooks are a powerful way to separate technical needs from business logic.<br> There are two different types of hooks:</p><p>There are hooks with return value, which are able to take inputs, execute some logic and return a value.<br> The returned value is then used as input for the next hook or the business function.<br> These hooks are expected to not throw any error and called transform hooks.</p><p>On the other hand, there are hooks which do not return a value. The purpose is to only validate input data, and they are expected to throw HandledError.<br> For better differentiation, hooks without return values called guard hooks.</p><h2 id="service-function-hooks" tabindex="-1"><a class="header-anchor" href="#service-function-hooks" aria-hidden="true">#</a> Service function hooks</h2><p><strong>Example-flow:</strong></p>',6),l=n(`<h3 id="beforetransformhook" tabindex="-1"><a class="header-anchor" href="#beforetransformhook" aria-hidden="true">#</a> BeforeTransformHook</h3><p>This transform hook is called before input validation.<br> It allows implementing migrations or decoding of input message payload without touching the main business logic.</p><p>A use case could be, that the message payload is encrypted and needs to be decrypted.<br> Typically, anything like input schema migrations is also a good example for using transform hooks.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> BeforeTransformHook<span class="token punctuation">,</span> FunctionDefinitionBuilder <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@purista/core&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createDecipheriv <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;crypto&#39;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> UserService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../UserService&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> inputParameterSchema<span class="token punctuation">,</span> inputPayloadSchema<span class="token punctuation">,</span> outputPayloadSchema <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./schema&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> signUp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./signUp&#39;</span>

<span class="token keyword">const</span> beforeTransformHook1<span class="token operator">:</span> BeforeTransformHook<span class="token operator">&lt;</span>UserService<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span>_logger<span class="token punctuation">,</span> input<span class="token punctuation">,</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    params<span class="token punctuation">,</span>
    payload<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>input <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> beforeTransformHook2<span class="token operator">:</span> BeforeTransformHook<span class="token operator">&lt;</span>UserService<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span>_logger<span class="token punctuation">,</span> input<span class="token punctuation">,</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> i <span class="token operator">=</span> input <span class="token keyword">as</span> <span class="token punctuation">{</span> iv<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> content<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>
  <span class="token keyword">const</span> p <span class="token operator">=</span> params <span class="token keyword">as</span> <span class="token punctuation">{</span> algorithm<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> secretKey<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>
  <span class="token keyword">const</span> decipher <span class="token operator">=</span> <span class="token function">createDecipheriv</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>algorithm<span class="token punctuation">,</span> p<span class="token punctuation">.</span>secretKey<span class="token punctuation">,</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>iv<span class="token punctuation">,</span> <span class="token string">&#39;hex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> decrpyted <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>decipher<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>content<span class="token punctuation">,</span> <span class="token string">&#39;hex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> decipher<span class="token punctuation">.</span><span class="token function">final</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    params<span class="token punctuation">,</span>
    payload<span class="token operator">:</span> decrpyted<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">FunctionDefinitionBuilder</span><span class="token punctuation">(</span><span class="token string">&#39;signUp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Sign up a new unknown user&#39;</span><span class="token punctuation">,</span> signUp<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">addInputSchema</span><span class="token punctuation">(</span>inputPayloadSchema<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">addParameterSchema</span><span class="token punctuation">(</span>inputParameterSchema<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">addOutputSchema</span><span class="token punctuation">(</span>outputPayloadSchema<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">exposeAsHttpEndpoint</span><span class="token punctuation">(</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/sign-up&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setBeforeTransformHook</span><span class="token punctuation">(</span>beforeTransformHook1<span class="token punctuation">,</span> beforeTransformHook2<span class="token punctuation">)</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="beforeguardhook" tabindex="-1"><a class="header-anchor" href="#beforeguardhook" aria-hidden="true">#</a> BeforeGuardHook</h3><p>The before guard hook is extremely useful for any use case where you need to validate authorization, rate limits and similar things.</p><p>This guard should throw a HandledError, if for example the user is not allowed to execute this function.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> BeforeGuardHook<span class="token punctuation">,</span> FunctionDefinitionBuilder <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@purista/core&#39;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> UserService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../UserService&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>
  inputParameterSchema<span class="token punctuation">,</span>
  InputParameterType<span class="token punctuation">,</span>
  inputPayloadSchema<span class="token punctuation">,</span>
  InputPayloadType<span class="token punctuation">,</span>
  outputPayloadSchema<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./schema&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> signUp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./signUp&#39;</span>

<span class="token keyword">const</span> beforeGuardHook1<span class="token operator">:</span> BeforeGuardHook<span class="token operator">&lt;</span>UserService<span class="token punctuation">,</span> InputPayloadType<span class="token punctuation">,</span> InputParameterType<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span>logger<span class="token punctuation">,</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;beforeGuardHook1&#39;</span><span class="token punctuation">,</span> input<span class="token punctuation">.</span>email<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> beforeGuardHook2<span class="token operator">:</span> BeforeGuardHook<span class="token operator">&lt;</span>UserService<span class="token punctuation">,</span> InputPayloadType<span class="token punctuation">,</span> InputParameterType<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span>logger<span class="token punctuation">,</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;beforeGuardHook2&#39;</span><span class="token punctuation">,</span> input<span class="token punctuation">.</span>password<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">FunctionDefinitionBuilder</span><span class="token punctuation">(</span><span class="token string">&#39;signUp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Sign up a new unknown user&#39;</span><span class="token punctuation">,</span> signUp<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">addInputSchema</span><span class="token punctuation">(</span>inputPayloadSchema<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">addParameterSchema</span><span class="token punctuation">(</span>inputParameterSchema<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">addOutputSchema</span><span class="token punctuation">(</span>outputPayloadSchema<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">exposeAsHttpEndpoint</span><span class="token punctuation">(</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/sign-up&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setBeforeGuardHook</span><span class="token punctuation">(</span>beforeGuardHook1<span class="token punctuation">,</span> beforeGuardHook2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="afterguardhook" tabindex="-1"><a class="header-anchor" href="#afterguardhook" aria-hidden="true">#</a> AfterGuardHook</h3><p>This guard hook is called after response validation and before AfterTransformHook.</p><p>There are not so much real use cases where it would make sense to use this hook.<br> Example is additional logging and any kind of metrics.</p><p>It is also possible to use this hook for optimization purpose.<br> As an example:</p><p>A function is making a financial transaction and returns the actual balance. You like to inform the user as soon as the balance is below a certain level.<br> You could build a subscription which is listening for all responses of this function. Expecting that only 10% of function responses will result in informing the user, 90% of subscription invocations would waste resources.</p>`,13),r=n(`<p>All hooks will need computation resources and because of this it will increase response time.<br> Also keep in mind that, in case a hook fails, and it is throwing, the business information might be lost or can&#39;t be reproduced.</p><p>In the financial example, prefer a subscription or simply emit some custom event in the after guard hook instead of doing some time-consuming stuff.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> AfterGuardHook<span class="token punctuation">,</span> FunctionDefinitionBuilder <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@purista/core&#39;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> UserService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../UserService&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> inputParameterSchema<span class="token punctuation">,</span> inputPayloadSchema<span class="token punctuation">,</span> outputPayloadSchema<span class="token punctuation">,</span> OutputPayloadType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./schema&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> signUp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./signUp&#39;</span>

<span class="token keyword">const</span> afterGuardHook1<span class="token operator">:</span> AfterGuardHook<span class="token operator">&lt;</span>UserService<span class="token punctuation">,</span> OutputPayloadType<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span>logger<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;afterGuardHook1&#39;</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>uuid<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> afterGuardHook2<span class="token operator">:</span> AfterGuardHook<span class="token operator">&lt;</span>UserService<span class="token punctuation">,</span> OutputPayloadType<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span>logger<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;afterGuardHook2&#39;</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>uuid<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">FunctionDefinitionBuilder</span><span class="token punctuation">(</span><span class="token string">&#39;signUp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Sign up a new unknown user&#39;</span><span class="token punctuation">,</span> signUp<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">addInputSchema</span><span class="token punctuation">(</span>inputPayloadSchema<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">addParameterSchema</span><span class="token punctuation">(</span>inputParameterSchema<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">addOutputSchema</span><span class="token punctuation">(</span>outputPayloadSchema<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">exposeAsHttpEndpoint</span><span class="token punctuation">(</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/sign-up&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setAfterGuardHook</span><span class="token punctuation">(</span>afterGuardHook1<span class="token punctuation">,</span> afterGuardHook2<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="aftertransformhook" tabindex="-1"><a class="header-anchor" href="#aftertransformhook" aria-hidden="true">#</a> AfterTransformHook</h3><p>This transform hook is called after output validation. It allows implementing migration or decoding or response payload without touching the main business logic.</p><p>Like the BeforeTransformHook, a good example could be the encryption of the response payload.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> AfterTransformHook<span class="token punctuation">,</span> FunctionDefinitionBuilder <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@purista/core&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createCipheriv<span class="token punctuation">,</span> randomBytes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;crypto&#39;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> UserService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../UserService&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> inputParameterSchema<span class="token punctuation">,</span> inputPayloadSchema<span class="token punctuation">,</span> outputPayloadSchema<span class="token punctuation">,</span> OutputPayloadType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./schema&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> signUp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./signUp&#39;</span>

<span class="token keyword">const</span> afterTransformHook1<span class="token operator">:</span> AfterTransformHook<span class="token operator">&lt;</span>UserService<span class="token punctuation">,</span> OutputPayloadType<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>
  _logger<span class="token punctuation">,</span>
  functionResult<span class="token punctuation">,</span>
  _inputPayload<span class="token punctuation">,</span>
  _params<span class="token punctuation">,</span>
  _message<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>functionResult<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">unknown</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> afterTransformHook2<span class="token operator">:</span> AfterTransformHook<span class="token operator">&lt;</span>
  UserService<span class="token punctuation">,</span>
  <span class="token builtin">string</span><span class="token punctuation">,</span>
  <span class="token builtin">unknown</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> algorithm<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> secretKey<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>
<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>_logger<span class="token punctuation">,</span> functionResult<span class="token punctuation">,</span> _inputPayload<span class="token punctuation">,</span> params<span class="token punctuation">,</span> _message<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> iv <span class="token operator">=</span> <span class="token function">randomBytes</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> cipher <span class="token operator">=</span> <span class="token function">createCipheriv</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>algorithm<span class="token punctuation">,</span> params<span class="token punctuation">.</span>secretKey<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>

  <span class="token keyword">const</span> encrypted <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>cipher<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>functionResult <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cipher<span class="token punctuation">.</span><span class="token function">final</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    iv<span class="token punctuation">,</span>
    content<span class="token operator">:</span> encrypted<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">FunctionDefinitionBuilder</span><span class="token punctuation">(</span><span class="token string">&#39;signUp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Sign up a new unknown user&#39;</span><span class="token punctuation">,</span> signUp<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">addInputSchema</span><span class="token punctuation">(</span>inputPayloadSchema<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">addParameterSchema</span><span class="token punctuation">(</span>inputParameterSchema<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">addOutputSchema</span><span class="token punctuation">(</span>outputPayloadSchema<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">exposeAsHttpEndpoint</span><span class="token punctuation">(</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/sign-up&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setAfterTransformHook</span><span class="token punctuation">(</span>afterTransformHook1<span class="token punctuation">,</span> afterTransformHook2<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function k(d,m){const t=s("Mermaid"),o=s("Badge");return e(),c("div",null,[u,a(t,{id:"mermaid-382ee14d",code:"flowchart%20TD%0A%20%20%20%20input(((Invoke)))%20%3D%3D%3E%20%7Cinput%20payload%7C%20transformHook%20%3D%3D%3E%20%7Cpayload%20transform%202%7C%20beforeGuardHook%20%3D%3D%3E%20%7Cpayload%20transform%202%7Cfunction%5BFunction%20with%20business%20logic%5D%20%3D%3D%3EafterGuardHook%3D%3D%3E%7Cresponse%20payload%7CafterTransformHook%20%3D%3D%3E%7Ctransformed%20response%20payload%7Cinput%0A%20%20%20%20subgraph%20transformHook%5Btransform%20hooks%5D%0A%20%20%20%20transformhook1%5BTransformHook%20like%20decrypt%5D%20--%3E%20%7Cpayload%20transform%201%7C%20transformhook2%5BTransformHook%20like%20JSON.parse%5D%0A%20%20%20%20end%0A%20%20%20%20subgraph%20beforeGuardHook%5Bbefore%20guard%20hooks%5D%0A%20%20%20%20%20%20%20%20beforehook1%5BBeforeGuardHook%20check%20permissions%5D-.-beforehook2%5BBeforeGuardHook%20check%20rate%20limits%5D%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20afterGuardHook%5Bafter%20guard%20hooks%5D%0A%20%20%20%20afterguardhook1%5BAfterGuardHook%20meassure%20timings%5D-.-afterguardhook2%5BAfterGuardHook%20additional%20log%5D%0A%20%20%20%20end%0A%0A%20%20%20%20subgraph%20afterTransformHook%5Bafter%20transform%20hooks%5D%0A%20%20%20%20aftertransformhook1%5BAfterGuardHook%20JSON.stringify%5D-.-%0A%20%20%20%20aftertransformhook2%5BAfterGuardHook%20encrypt%5D%0A%20%20%20%20end%0A%20%20%20%0A%20%20%20%20beforeGuardHook%20-.-%3E%20%7CHandled%20Error%7Cinput%0A%20%20%20%20afterGuardHook%20-.-%3E%20%7CHandled%20Error%7Cinput%0A"}),l,a(o,{text:"Be aware",type:"warning"}),r])}var h=p(i,[["render",k],["__file","4_hooks.html.vue"]]);export{h as default};
